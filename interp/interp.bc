(* -*- mode: tuareg -*- *)

let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n) <- ret; old_base + n + 1)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1)) in

(* declaring a casting function: int array -> int *)
let rec cast_fAII x = x in
(* declaring a casting function: int -> int array *)
let rec cast_fIAI x = x in

let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n) <- ret; old_base + n + 1)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1)) in

let rec pop stack sp = stack.(sp - 1) in
let rec push stack sp v = stack.(sp) <- v in

let rec interp stack sp bytecode pc =
  let instr = bytecode.(pc) in
  (* print_debug pc instr sp; *)
  if instr = 0 then             (* UNIT *)
    interp stack sp bytecode (pc + 1)
  else if instr = 1 then        (* ADD *)
    let v2 = stack.(sp - 1) in  (* sp: sp - 1 *)
    let v1 = stack.(sp - 2) in  (* sp: sp - 2 *)
    stack.(sp-2) <- (v1+v2);    (* sp: sp - 1 *)
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 2 then        (* SUB *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 - v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 3 then        (* MUL *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 * v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 4 then        (* NOT *)
    let v = stack.(sp - 1) in
    let n = (if v = 0 then 1 else 0)in
    stack.(sp - 1) <- n;
    interp stack sp bytecode (pc + 1)
  else if instr = 5 then        (* LT *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    let n = (if v1 < v2 then 1 else 0) in
    stack.(sp - 2) <- n;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 6 then        (* EQ *)
    let v1 = stack.(sp - 1) in
    let v2 = stack.(sp - 2) in
    let v = (if v1 = v2 then 1 else 0) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 14 then       (* CONST *)
    let c = bytecode.(pc + 1) in
    stack.(sp) <- c;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 7 then        (* JUMP_IF_ZERO *)
    let addr = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    let sp2 = sp - 1 in
    if v = 0 then (
      interp stack sp2 bytecode addr
    ) else
      interp stack sp2 bytecode (pc + 2)
  else if instr = 8 then        (* JUMP *)
    let addr = bytecode.(pc + 1) in
    interp stack sp bytecode addr
  else if instr = 9 then        (* CALL *)
    let addr = bytecode.(pc + 1) in
    let _ = bytecode.(pc + 2) in
    stack.(sp) <- 100;          (* push jit flag *)
    stack.(sp + 1) <- pc + 3;
    interp stack (sp + 2) bytecode addr
  else if instr = 22 then       (* CALL_HS *)
    let addr = bytecode.(pc + 1) in
    stack.(sp) <- pc + 2;
    interp stack (sp + 1) bytecode addr
  else if instr = 10 then       (* RET *)
    let n = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    let addr = stack.(sp-2) in  (* sp: sp-3 *)
    let _ = stack.(sp-3) in     (* sp: sp-3 *)
    stack.(sp - n - 3) <- v;    (* sp: sp-3-n+1 = sp-2-n *)
    let sp2 = sp - n - 2 in
    interp stack sp2 bytecode addr
  else if instr = 11 then       (* HALT *)
    stack.(sp - 1)
  else if instr = 12 then       (* DUP *)
    let n = bytecode.(pc + 1) in
    let v = stack.(sp - n - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 13 then       (* POP1 *)
    let v = stack.(sp - 1) in
    let _ = stack.(sp - 2) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 15 then       (* GET *)
    let n = stack.(sp - 1) in
    let arr = cast_fIAI(stack.(sp - 2)) in
    stack.(sp - 2) <- arr.(n);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 16 then       (* PUT *)
    let i = stack.(sp - 1) in
    let arr = cast_fIAI(stack.(sp - 2)) in
    let n = stack.(sp - 3) in
    arr.(i) <- n;
    stack.(sp - 3) <- cast_fAII(arr);
    interp stack (sp - 2) bytecode (pc + 1)
  else if instr = 17 then       (* ARRAYMAKE *)
    let init = stack.(sp - 1) in
    let size = stack.(sp - 2) in
    let a = Array.make size init in
    stack.(sp - 2) <- cast_fAII(a);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 18 then       (* FRAME_RESET *)
    let o = bytecode.(pc + 1) in
    let l = bytecode.(pc + 2) in
    let n = bytecode.(pc + 3) in
    let ret = stack.(sp-n-l-1) in
    let old_base = sp - n - l - o - 1 in
    let new_base = sp - n in
    let sp2 = frame_reset stack old_base new_base ret n 0 in
    interp stack sp2 bytecode (pc + 4)
  else if instr = 19 then       (* PRINT_INT *)
    let v = stack.(sp - 1) in
    print_int v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 20 then       (* POP0 *)
    let _ = stack.(sp - 1) in
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 21 then       (* METHOD_ENTRY *)
    interp stack sp bytecode (pc + 1)
  else if instr = 22 then       (* CONST0 *)
    (stack.(sp) <- 0;
     interp stack (sp + 1) bytecode (pc + 1))
  else if instr = 23 then       (* DUP0 *)
    let v = stack.(sp - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 1)
  else
    -1000 in
let stk  = Array.make 100000 (-987) in
let code = Array.make 100000 11 in
(* fib *)
(* matmul (stack hybridization) *)
code.(0) <- 21;
code.(1) <- 14;
code.(2) <- 0;
code.(3) <- 14;
code.(4) <- 0;
code.(5) <- 12;
code.(6) <- 1;
code.(7) <- 12;
code.(8) <- 1;
code.(9) <- 17;
code.(10) <- 14;
code.(11) <- 2;
code.(12) <- 14;
code.(13) <- 3;
code.(14) <- 12;
code.(15) <- 1;
code.(16) <- 12;
code.(17) <- 1;
code.(18) <- 12;
code.(19) <- 4;
code.(20) <- 9;
code.(21) <- 650;
code.(22) <- 3;
code.(23) <- 14;
code.(24) <- 3;
code.(25) <- 14;
code.(26) <- 2;
code.(27) <- 12;
code.(28) <- 1;
code.(29) <- 12;
code.(30) <- 1;
code.(31) <- 12;
code.(32) <- 7;
code.(33) <- 9;
code.(34) <- 650;
code.(35) <- 3;
code.(36) <- 14;
code.(37) <- 2;
code.(38) <- 14;
code.(39) <- 2;
code.(40) <- 12;
code.(41) <- 1;
code.(42) <- 12;
code.(43) <- 1;
code.(44) <- 12;
code.(45) <- 10;
code.(46) <- 9;
code.(47) <- 650;
code.(48) <- 3;
code.(49) <- 12;
code.(50) <- 6;
code.(51) <- 14;
code.(52) <- 0;
code.(53) <- 15;
code.(54) <- 14;
code.(55) <- 1;
code.(56) <- 12;
code.(57) <- 0;
code.(58) <- 12;
code.(59) <- 2;
code.(60) <- 14;
code.(61) <- 0;
code.(62) <- 16;
code.(63) <- 12;
code.(64) <- 9;
code.(65) <- 14;
code.(66) <- 0;
code.(67) <- 15;
code.(68) <- 14;
code.(69) <- 2;
code.(70) <- 12;
code.(71) <- 0;
code.(72) <- 12;
code.(73) <- 2;
code.(74) <- 14;
code.(75) <- 1;
code.(76) <- 16;
code.(77) <- 12;
code.(78) <- 12;
code.(79) <- 14;
code.(80) <- 0;
code.(81) <- 15;
code.(82) <- 14;
code.(83) <- 3;
code.(84) <- 12;
code.(85) <- 0;
code.(86) <- 12;
code.(87) <- 2;
code.(88) <- 14;
code.(89) <- 2;
code.(90) <- 16;
code.(91) <- 12;
code.(92) <- 15;
code.(93) <- 14;
code.(94) <- 1;
code.(95) <- 15;
code.(96) <- 14;
code.(97) <- 4;
code.(98) <- 12;
code.(99) <- 0;
code.(100) <- 12;
code.(101) <- 2;
code.(102) <- 14;
code.(103) <- 0;
code.(104) <- 16;
code.(105) <- 12;
code.(106) <- 18;
code.(107) <- 14;
code.(108) <- 1;
code.(109) <- 15;
code.(110) <- 14;
code.(111) <- 5;
code.(112) <- 12;
code.(113) <- 0;
code.(114) <- 12;
code.(115) <- 2;
code.(116) <- 14;
code.(117) <- 1;
code.(118) <- 16;
code.(119) <- 12;
code.(120) <- 21;
code.(121) <- 14;
code.(122) <- 1;
code.(123) <- 15;
code.(124) <- 14;
code.(125) <- 6;
code.(126) <- 12;
code.(127) <- 0;
code.(128) <- 12;
code.(129) <- 2;
code.(130) <- 14;
code.(131) <- 2;
code.(132) <- 16;
code.(133) <- 12;
code.(134) <- 21;
code.(135) <- 14;
code.(136) <- 0;
code.(137) <- 15;
code.(138) <- 14;
code.(139) <- 7;
code.(140) <- 12;
code.(141) <- 0;
code.(142) <- 12;
code.(143) <- 2;
code.(144) <- 14;
code.(145) <- 0;
code.(146) <- 16;
code.(147) <- 12;
code.(148) <- 24;
code.(149) <- 14;
code.(150) <- 0;
code.(151) <- 15;
code.(152) <- 14;
code.(153) <- 8;
code.(154) <- 12;
code.(155) <- 0;
code.(156) <- 12;
code.(157) <- 2;
code.(158) <- 14;
code.(159) <- 1;
code.(160) <- 16;
code.(161) <- 12;
code.(162) <- 27;
code.(163) <- 14;
code.(164) <- 1;
code.(165) <- 15;
code.(166) <- 14;
code.(167) <- 9;
code.(168) <- 12;
code.(169) <- 0;
code.(170) <- 12;
code.(171) <- 2;
code.(172) <- 14;
code.(173) <- 0;
code.(174) <- 16;
code.(175) <- 12;
code.(176) <- 30;
code.(177) <- 14;
code.(178) <- 1;
code.(179) <- 15;
code.(180) <- 14;
code.(181) <- 10;
code.(182) <- 12;
code.(183) <- 0;
code.(184) <- 12;
code.(185) <- 2;
code.(186) <- 14;
code.(187) <- 1;
code.(188) <- 16;
code.(189) <- 12;
code.(190) <- 33;
code.(191) <- 14;
code.(192) <- 2;
code.(193) <- 15;
code.(194) <- 14;
code.(195) <- 1;
code.(196) <- 12;
code.(197) <- 0;
code.(198) <- 12;
code.(199) <- 2;
code.(200) <- 14;
code.(201) <- 0;
code.(202) <- 16;
code.(203) <- 12;
code.(204) <- 36;
code.(205) <- 14;
code.(206) <- 2;
code.(207) <- 15;
code.(208) <- 14;
code.(209) <- 12;
code.(210) <- 12;
code.(211) <- 0;
code.(212) <- 12;
code.(213) <- 2;
code.(214) <- 14;
code.(215) <- 1;
code.(216) <- 16;
code.(217) <- 14;
code.(218) <- 2;
code.(219) <- 14;
code.(220) <- 3;
code.(221) <- 14;
code.(222) <- 2;
code.(223) <- 12;
code.(224) <- 2;
code.(225) <- 12;
code.(226) <- 2;
code.(227) <- 12;
code.(228) <- 2;
code.(229) <- 12;
code.(230) <- 48;
code.(231) <- 12;
code.(232) <- 46;
code.(233) <- 12;
code.(234) <- 44;
code.(235) <- 9;
code.(236) <- 578;
code.(237) <- 6;
code.(238) <- 12;
code.(239) <- 40;
code.(240) <- 14;
code.(241) <- 0;
code.(242) <- 15;
code.(243) <- 12;
code.(244) <- 0;
code.(245) <- 14;
code.(246) <- 0;
code.(247) <- 15;
code.(248) <- 12;
code.(249) <- 42;
code.(250) <- 14;
code.(251) <- 0;
code.(252) <- 15;
code.(253) <- 12;
code.(254) <- 0;
code.(255) <- 14;
code.(256) <- 1;
code.(257) <- 15;
code.(258) <- 12;
code.(259) <- 2;
code.(260) <- 12;
code.(261) <- 1;
code.(262) <- 1;
code.(263) <- 12;
code.(264) <- 45;
code.(265) <- 14;
code.(266) <- 1;
code.(267) <- 15;
code.(268) <- 12;
code.(269) <- 0;
code.(270) <- 14;
code.(271) <- 0;
code.(272) <- 15;
code.(273) <- 12;
code.(274) <- 2;
code.(275) <- 12;
code.(276) <- 1;
code.(277) <- 1;
code.(278) <- 12;
code.(279) <- 48;
code.(280) <- 14;
code.(281) <- 1;
code.(282) <- 15;
code.(283) <- 12;
code.(284) <- 0;
code.(285) <- 14;
code.(286) <- 1;
code.(287) <- 15;
code.(288) <- 12;
code.(289) <- 2;
code.(290) <- 12;
code.(291) <- 1;
code.(292) <- 1;
code.(293) <- 12;
code.(294) <- 0;
code.(295) <- 19;
code.(296) <- 13;
code.(297) <- 13;
code.(298) <- 13;
code.(299) <- 13;
code.(300) <- 13;
code.(301) <- 13;
code.(302) <- 13;
code.(303) <- 13;
code.(304) <- 13;
code.(305) <- 13;
code.(306) <- 13;
code.(307) <- 13;
code.(308) <- 13;
code.(309) <- 13;
code.(310) <- 13;
code.(311) <- 13;
code.(312) <- 13;
code.(313) <- 13;
code.(314) <- 13;
code.(315) <- 13;
code.(316) <- 13;
code.(317) <- 13;
code.(318) <- 13;
code.(319) <- 13;
code.(320) <- 13;
code.(321) <- 13;
code.(322) <- 13;
code.(323) <- 13;
code.(324) <- 13;
code.(325) <- 13;
code.(326) <- 13;
code.(327) <- 13;
code.(328) <- 13;
code.(329) <- 13;
code.(330) <- 13;
code.(331) <- 13;
code.(332) <- 13;
code.(333) <- 13;
code.(334) <- 13;
code.(335) <- 13;
code.(336) <- 13;
code.(337) <- 13;
code.(338) <- 13;
code.(339) <- 13;
code.(340) <- 13;
code.(341) <- 13;
code.(342) <- 13;
code.(343) <- 13;
code.(344) <- 13;
code.(345) <- 13;
code.(346) <- 13;
code.(347) <- 13;
code.(348) <- 13;
code.(349) <- 13;
code.(350) <- 13;
code.(351) <- 13;
code.(352) <- 13;
code.(353) <- 13;
code.(354) <- 13;
code.(355) <- 13;
code.(356) <- 13;
code.(357) <- 13;
code.(358) <- 13;
code.(359) <- 11;
code.(360) <- 21;
code.(361) <- 12;
code.(362) <- 6;
code.(363) <- 14;
code.(364) <- 0;
code.(365) <- 5;
code.(366) <- 7;
code.(367) <- 374;
code.(368) <- 14;
code.(369) <- 1;
code.(370) <- 14;
code.(371) <- 0;
code.(372) <- 7;
code.(373) <- 457;
code.(374) <- 12;
code.(375) <- 4;
code.(376) <- 12;
code.(377) <- 8;
code.(378) <- 15;
code.(379) <- 12;
code.(380) <- 0;
code.(381) <- 12;
code.(382) <- 8;
code.(383) <- 15;
code.(384) <- 12;
code.(385) <- 5;
code.(386) <- 12;
code.(387) <- 9;
code.(388) <- 15;
code.(389) <- 12;
code.(390) <- 0;
code.(391) <- 12;
code.(392) <- 9;
code.(393) <- 15;
code.(394) <- 12;
code.(395) <- 2;
code.(396) <- 12;
code.(397) <- 1;
code.(398) <- 3;
code.(399) <- 12;
code.(400) <- 7;
code.(401) <- 12;
code.(402) <- 13;
code.(403) <- 15;
code.(404) <- 12;
code.(405) <- 8;
code.(406) <- 12;
code.(407) <- 14;
code.(408) <- 15;
code.(409) <- 12;
code.(410) <- 0;
code.(411) <- 12;
code.(412) <- 13;
code.(413) <- 15;
code.(414) <- 12;
code.(415) <- 0;
code.(416) <- 12;
code.(417) <- 4;
code.(418) <- 1;
code.(419) <- 12;
code.(420) <- 0;
code.(421) <- 12;
code.(422) <- 4;
code.(423) <- 12;
code.(424) <- 16;
code.(425) <- 16;
code.(426) <- 12;
code.(427) <- 16;
code.(428) <- 14;
code.(429) <- 1;
code.(430) <- 2;
code.(431) <- 12;
code.(432) <- 18;
code.(433) <- 12;
code.(434) <- 1;
code.(435) <- 12;
code.(436) <- 18;
code.(437) <- 12;
code.(438) <- 18;
code.(439) <- 12;
code.(440) <- 18;
code.(441) <- 12;
code.(442) <- 18;
code.(443) <- 9;
code.(444) <- 361;
code.(445) <- 6;
code.(446) <- 13;
code.(447) <- 13;
code.(448) <- 13;
code.(449) <- 13;
code.(450) <- 13;
code.(451) <- 13;
code.(452) <- 13;
code.(453) <- 13;
code.(454) <- 13;
code.(455) <- 13;
code.(456) <- 13;
code.(457) <- 10;
code.(458) <- 6;
code.(459) <- 21;
code.(460) <- 12;
code.(461) <- 5;
code.(462) <- 14;
code.(463) <- 0;
code.(464) <- 5;
code.(465) <- 7;
code.(466) <- 473;
code.(467) <- 14;
code.(468) <- 1;
code.(469) <- 14;
code.(470) <- 0;
code.(471) <- 7;
code.(472) <- 516;
code.(473) <- 12;
code.(474) <- 6;
code.(475) <- 14;
code.(476) <- 1;
code.(477) <- 2;
code.(478) <- 12;
code.(479) <- 8;
code.(480) <- 12;
code.(481) <- 1;
code.(482) <- 12;
code.(483) <- 8;
code.(484) <- 12;
code.(485) <- 8;
code.(486) <- 12;
code.(487) <- 8;
code.(488) <- 12;
code.(489) <- 8;
code.(490) <- 9;
code.(491) <- 361;
code.(492) <- 6;
code.(493) <- 12;
code.(494) <- 7;
code.(495) <- 14;
code.(496) <- 1;
code.(497) <- 2;
code.(498) <- 12;
code.(499) <- 10;
code.(500) <- 12;
code.(501) <- 10;
code.(502) <- 12;
code.(503) <- 2;
code.(504) <- 12;
code.(505) <- 10;
code.(506) <- 12;
code.(507) <- 10;
code.(508) <- 12;
code.(509) <- 10;
code.(510) <- 9;
code.(511) <- 460;
code.(512) <- 6;
code.(513) <- 13;
code.(514) <- 13;
code.(515) <- 13;
code.(516) <- 10;
code.(517) <- 6;
code.(518) <- 21;
code.(519) <- 12;
code.(520) <- 7;
code.(521) <- 14;
code.(522) <- 0;
code.(523) <- 5;
code.(524) <- 7;
code.(525) <- 532;
code.(526) <- 14;
code.(527) <- 0;
code.(528) <- 14;
code.(529) <- 0;
code.(530) <- 7;
code.(531) <- 575;
code.(532) <- 12;
code.(533) <- 5;
code.(534) <- 14;
code.(535) <- 1;
code.(536) <- 2;
code.(537) <- 12;
code.(538) <- 8;
code.(539) <- 12;
code.(540) <- 8;
code.(541) <- 12;
code.(542) <- 2;
code.(543) <- 12;
code.(544) <- 8;
code.(545) <- 12;
code.(546) <- 8;
code.(547) <- 12;
code.(548) <- 8;
code.(549) <- 9;
code.(550) <- 460;
code.(551) <- 6;
code.(552) <- 12;
code.(553) <- 9;
code.(554) <- 14;
code.(555) <- 1;
code.(556) <- 2;
code.(557) <- 12;
code.(558) <- 0;
code.(559) <- 12;
code.(560) <- 10;
code.(561) <- 12;
code.(562) <- 10;
code.(563) <- 12;
code.(564) <- 10;
code.(565) <- 12;
code.(566) <- 10;
code.(567) <- 12;
code.(568) <- 10;
code.(569) <- 9;
code.(570) <- 519;
code.(571) <- 6;
code.(572) <- 13;
code.(573) <- 13;
code.(574) <- 13;
code.(575) <- 10;
code.(576) <- 6;
code.(577) <- 21;
code.(578) <- 12;
code.(579) <- 7;
code.(580) <- 14;
code.(581) <- 1;
code.(582) <- 2;
code.(583) <- 12;
code.(584) <- 0;
code.(585) <- 12;
code.(586) <- 8;
code.(587) <- 12;
code.(588) <- 8;
code.(589) <- 12;
code.(590) <- 8;
code.(591) <- 12;
code.(592) <- 8;
code.(593) <- 12;
code.(594) <- 8;
code.(595) <- 9;
code.(596) <- 519;
code.(597) <- 6;
code.(598) <- 13;
code.(599) <- 10;
code.(600) <- 6;
code.(601) <- 21;
code.(602) <- 12;
code.(603) <- 4;
code.(604) <- 14;
code.(605) <- 0;
code.(606) <- 5;
code.(607) <- 7;
code.(608) <- 615;
code.(609) <- 14;
code.(610) <- 1;
code.(611) <- 14;
code.(612) <- 0;
code.(613) <- 7;
code.(614) <- 647;
code.(615) <- 14;
code.(616) <- 0;
code.(617) <- 12;
code.(618) <- 4;
code.(619) <- 12;
code.(620) <- 1;
code.(621) <- 17;
code.(622) <- 12;
code.(623) <- 0;
code.(624) <- 12;
code.(625) <- 5;
code.(626) <- 12;
code.(627) <- 8;
code.(628) <- 16;
code.(629) <- 12;
code.(630) <- 7;
code.(631) <- 14;
code.(632) <- 1;
code.(633) <- 2;
code.(634) <- 12;
code.(635) <- 0;
code.(636) <- 12;
code.(637) <- 8;
code.(638) <- 12;
code.(639) <- 8;
code.(640) <- 9;
code.(641) <- 602;
code.(642) <- 3;
code.(643) <- 13;
code.(644) <- 13;
code.(645) <- 13;
code.(646) <- 13;
code.(647) <- 10;
code.(648) <- 3;
code.(649) <- 21;
code.(650) <- 12;
code.(651) <- 4;
code.(652) <- 12;
code.(653) <- 3;
code.(654) <- 17;
code.(655) <- 12;
code.(656) <- 5;
code.(657) <- 14;
code.(658) <- 1;
code.(659) <- 2;
code.(660) <- 12;
code.(661) <- 0;
code.(662) <- 12;
code.(663) <- 6;
code.(664) <- 12;
code.(665) <- 3;
code.(666) <- 9;
code.(667) <- 602;
code.(668) <- 3;
code.(669) <- 12;
code.(670) <- 2;
code.(671) <- 13;
code.(672) <- 13;
code.(673) <- 13;
code.(674) <- 10;
code.(675) <- 3;
(* gcd *)
let _ = (interp stk 1 code 0) in
()
